const axios = require('axios');
const { extractTokenInfo, checkAgainstFilters, formatTokenMessage } = require('./Helper.function');

async function checkNewTokens(bot, chatId, PUMP_FUN_PROGRAM, filters) {
  try {
    const maxRetries = 3;
    let retryCount = 0;

    while (retryCount < maxRetries) {
      try {
        const response = await axios.get(
          `https://api.helius.xyz/v0/addresses/${PUMP_FUN_PROGRAM.toBase58()}/transactions?api-key=${process.env.HELIUS_API_KEY}&limit=5`
        );
        const txs = response.data;

        for (let tx of txs) {
          if (tx.type === 'TOKEN_MINT') { // Changed from CREATE to TOKEN_MINT
            const tokenInfo = await extractTokenInfo(tx);
            if (!tokenInfo) continue;

            const passed = checkAgainstFilters(tokenInfo, filters);
            if (passed) {
              const message = formatTokenMessage(tokenInfo);
              await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
            }
          }
        }
        return; // Exit if successful
      } catch (err) {
        if (err.response && err.response.status === 429) {
          retryCount++;
          const waitTime = Math.pow(2, retryCount) * 1000; // Exponential backoff: 2s, 4s, 8s
          console.log(`Rate limit hit in checkNewTokens, retrying after ${waitTime}ms...`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        } else {
          console.error("Token check error:", err.message);
          throw err;
        }
      }
    }
    console.error("Max retries reached in checkNewTokens");
  } catch (err) {
    console.error("Token check error:", err.message);
  }
}

// Export for use in index.js
module.exports = { checkNewTokens };
